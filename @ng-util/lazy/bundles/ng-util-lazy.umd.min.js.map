{"version":3,"sources":["../../../../packages/lazy/lazy.service.ts"],"names":["NuLazyService","doc","this","list","cached","_notify","BehaviorSubject","Object","defineProperty","prototype","asObservable","pipe","share","filter","ls","length","clear","load","paths","_this","Array","isArray","promises","forEach","path","endsWith","push","loadScript","loadStyle","Promise","all","then","res","next","resolve","options","innerContent","assign","onSuccess","item","node","createElement","type","src","charset","innerHTML","readyState","onreadystatechange","status","onload","onerror","error","getElementsByTagName","appendChild","_a","rel","href","Injectable","args","providedIn","Inject","DOCUMENT"],"mappings":"4dAiBE,SAAAA,EAAsCC,GAAAC,KAAAD,IAAAA,EAJ9BC,KAAAC,KAAmC,GACnCD,KAAAE,OAA0C,GAC1CF,KAAAG,QAA2C,IAAIC,EAAAA,gBAAgC,WAIvFC,OAAAC,eAAIR,EAAAS,UAAA,SAAM,KAAV,WACE,OAAOP,KAAKG,QAAQK,eAAeC,KACjCC,EAAAA,QACAC,EAAAA,QAAM,SAACC,GAAM,OAAc,IAAdA,EAAGC,4CAIpBf,EAAAS,UAAAO,MAAA,WACEd,KAAKC,KAAO,GACZD,KAAKE,OAAS,IAGhBJ,EAAAS,UAAAQ,KAAA,SAAKC,GAAL,IAAAC,EAAAjB,KACOkB,MAAMC,QAAQH,KACjBA,EAAQ,CAACA,QAGLI,EAAyC,GAS/C,OARAJ,EAAMK,SAAO,SAACC,GACRA,EAAKC,SAAS,OAChBH,EAASI,KAAKP,EAAKQ,WAAWH,IAE9BF,EAASI,KAAKP,EAAKS,UAAUJ,OAI1BK,QAAQC,IAAIR,GAAUS,MAAI,SAACC,GAEhC,OADAb,EAAKd,QAAQ4B,KAAKD,GACXH,QAAQK,QAAQF,OAI3BhC,EAAAS,UAAAkB,WAAA,SAAWH,EAAcW,GAAzB,IAAAhB,EAAAjB,KACUkC,EAAY7B,OAAA8B,OAAA,GAAUF,GAASC,aACvC,OAAO,IAAIP,SAAO,SAACK,GACjB,IAAwB,IAApBf,EAAKhB,KAAKqB,GAAd,CAKAL,EAAKhB,KAAKqB,IAAQ,MACZc,EAAS,SAAIC,GACjBpB,EAAKf,OAAOoB,GAAQe,EACpBL,EAAQK,GACRpB,EAAKd,QAAQ4B,KAAK,CAACM,KAGfC,EAAOrB,EAAKlB,IAAIwC,cAAc,UACpCD,EAAKE,KAAO,kBACZF,EAAKG,IAAMnB,EACXgB,EAAKI,QAAU,QACXR,IACFI,EAAKK,UAAYT,GAEfI,EAAKM,WAEPN,EAAKO,mBAAkB,WACG,WAApBP,EAAKM,YAA+C,aAApBN,EAAKM,aACvCN,EAAKO,mBAAqB,KAC1BT,EAAU,CACRd,KAAIA,EACJwB,OAAQ,SAKdR,EAAKS,OAAM,WACT,OAAAX,EAAU,CACRd,KAAIA,EACJwB,OAAQ,QAGdR,EAAKU,QAAO,SAAIC,GACd,OAAAb,EAAU,CACRd,KAAIA,EACJwB,OAAQ,QACRG,MAAKA,KAEThC,EAAKlB,IAAImD,qBAAqB,QAAQ,GAAGC,YAAYb,QA1CnDN,EAAO3B,OAAA8B,OAAA9B,OAAA8B,OAAA,GAAMlB,EAAKf,OAAOoB,IAAK,CAAEwB,OAAQ,iBA8C9ChD,EAAAS,UAAAmB,UAAA,SAAUJ,EAAcW,GAAxB,IAAAhB,EAAAjB,KACQoD,EAAA/C,OAAA8B,OAAA,CAA0BkB,IAAK,cAAiBpB,GAA9CoB,EAAGD,EAAAC,IAAEnB,EAAYkB,EAAAlB,aACzB,OAAO,IAAIP,SAAO,SAACK,GACjB,IAAwB,IAApBf,EAAKhB,KAAKqB,GAAd,CAKAL,EAAKhB,KAAKqB,IAAQ,MAEZgB,EAAOrB,EAAKlB,IAAIwC,cAAc,QACpCD,EAAKe,IAAMA,EACXf,EAAKE,KAAO,WACZF,EAAKgB,KAAOhC,EACRY,IACFI,EAAKK,UAAYT,GAEnBjB,EAAKlB,IAAImD,qBAAqB,QAAQ,GAAGC,YAAYb,OAC/CD,EAAqB,CACzBf,KAAIA,EACJwB,OAAQ,MAEV7B,EAAKf,OAAOoB,GAAQe,EACpBL,EAAQK,QAnBNL,EAAQf,EAAKf,OAAOoB,iCA9F3BiC,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,6EAMXC,EAAAA,OAAMF,KAAA,CAACG,EAAAA","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\n\nexport interface NuLazyResult {\n  path: string;\n  status: 'ok' | 'error' | 'loading';\n  error?: {};\n}\n\n@Injectable({ providedIn: 'root' })\nexport class NuLazyService {\n  private list: { [key: string]: boolean } = {};\n  private cached: { [key: string]: NuLazyResult } = {};\n  private _notify: BehaviorSubject<NuLazyResult[]> = new BehaviorSubject<NuLazyResult[]>([]);\n\n  constructor(@Inject(DOCUMENT) private doc: any) {}\n\n  get change(): Observable<NuLazyResult[]> {\n    return this._notify.asObservable().pipe(\n      share(),\n      filter(ls => ls.length !== 0),\n    );\n  }\n\n  clear(): void {\n    this.list = {};\n    this.cached = {};\n  }\n\n  load(paths: string | string[]): Promise<NuLazyResult[]> {\n    if (!Array.isArray(paths)) {\n      paths = [paths];\n    }\n\n    const promises: Array<Promise<NuLazyResult>> = [];\n    paths.forEach(path => {\n      if (path.endsWith('.js')) {\n        promises.push(this.loadScript(path));\n      } else {\n        promises.push(this.loadStyle(path));\n      }\n    });\n\n    return Promise.all(promises).then(res => {\n      this._notify.next(res);\n      return Promise.resolve(res);\n    });\n  }\n\n  loadScript(path: string, options?: { innerContent?: string }): Promise<NuLazyResult> {\n    const { innerContent } = { ...options };\n    return new Promise(resolve => {\n      if (this.list[path] === true) {\n        resolve({ ...this.cached[path], status: 'loading' });\n        return;\n      }\n\n      this.list[path] = true;\n      const onSuccess = (item: NuLazyResult) => {\n        this.cached[path] = item;\n        resolve(item);\n        this._notify.next([item]);\n      };\n\n      const node = this.doc.createElement('script') as any;\n      node.type = 'text/javascript';\n      node.src = path;\n      node.charset = 'utf-8';\n      if (innerContent) {\n        node.innerHTML = innerContent;\n      }\n      if (node.readyState) {\n        // IE\n        node.onreadystatechange = () => {\n          if (node.readyState === 'loaded' || node.readyState === 'complete') {\n            node.onreadystatechange = null;\n            onSuccess({\n              path,\n              status: 'ok',\n            });\n          }\n        };\n      } else {\n        node.onload = () =>\n          onSuccess({\n            path,\n            status: 'ok',\n          });\n      }\n      node.onerror = (error: {}) =>\n        onSuccess({\n          path,\n          status: 'error',\n          error,\n        });\n      this.doc.getElementsByTagName('head')[0].appendChild(node);\n    });\n  }\n\n  loadStyle(path: string, options?: { rel?: string; innerContent?: string }): Promise<NuLazyResult> {\n    const { rel, innerContent } = { rel: 'stylesheet', ...options };\n    return new Promise(resolve => {\n      if (this.list[path] === true) {\n        resolve(this.cached[path]);\n        return;\n      }\n\n      this.list[path] = true;\n\n      const node = this.doc.createElement('link') as HTMLLinkElement;\n      node.rel = rel;\n      node.type = 'text/css';\n      node.href = path;\n      if (innerContent) {\n        node.innerHTML = innerContent;\n      }\n      this.doc.getElementsByTagName('head')[0].appendChild(node);\n      const item: NuLazyResult = {\n        path,\n        status: 'ok',\n      };\n      this.cached[path] = item;\n      resolve(item);\n    });\n  }\n}\n"]}